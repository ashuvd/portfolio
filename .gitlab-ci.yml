stages:
  - build
  - docker_build
  - docker_deploy

build:
  image: node:14
  stage: build
  script:
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    expire_in: 1 week
    paths:
      - backend/public
  tags:
    - portfolio-docker
  only:
    - master

docker_build:
  stage: docker_build
  tags:
    - portfolio-shell
  before_script:
    - cat ~/docker_password.txt | docker login -u $DOCKER_USER --password-stdin
  script:
    - if [[ $(docker images -a | grep "$DOCKER_PROJECT" | awk '{print $3}') ]]; then docker images -a | grep "$DOCKER_PROJECT" | awk '{print $3}' | xargs docker rmi; fi
    - docker build --build-arg DB_USER="${POSTGRESQL_DB_USER}" --build-arg DB_PASS="${POSTGRESQL_DB_PASSWORD}" --build-arg DB_HOST="${POSTGRESQL_DB_HOST}" --build-arg DB_MIGRATE_HOST="${POSTGRESQL_DB_MIGRATE_HOST}" --build-arg DB_PORT="${POSTGRESQL_DB_PORT}" --build-arg DB_NAME="${POSTGRESQL_DB_NAME}" --build-arg PORT="${PORT}" --build-arg HOST="${HOST}" -t $DOCKER_USER/$DOCKER_PROJECT:latest ./backend
    - docker push $DOCKER_USER/$DOCKER_PROJECT
  only:
    - master
docker_deploy:
  image: alpine
  stage: docker_deploy
  tags:
    - portfolio-docker
  script:
    - apk add --no-cache openssh
    - mkdir ~/.ssh
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh $SSH_USER@$SSH_HOST "export DOCKER_USER=$DOCKER_USER; export DOCKER_PROJECT=$DOCKER_PROJECT; export PORT=$PORT; bash -s" < deploy.sh
  only:
    - master
